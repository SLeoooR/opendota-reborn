package com.scottandmarc.opendotareborn.app.domain.entities

data class HeroStats(
    val id: Int,
    val name: String,
    val localizedName: String,
    val primaryAttr: String,
    val attackType: String,
    val roles: List<String>,
    val img: String,
    val icon: String,
    val baseHealth: Int,
    val baseHealthRegen: Float,
    val baseMana: Int,
    val baseManaRegen: Float,
    val baseArmor: Float,
    val baseMagicResist: Int,
    val baseAttackMin: Int,
    val baseAttackMax: Int,
    val baseStr: Int,
    val baseAgi: Int,
    val baseInt: Int,
    val strGain: Float,
    val agiGain: Float,
    val intGain: Float,
    val attackRange: Int,
    val projectileSpeed: Int,
    val attackRate: Float,
    val moveSpeed: Int,
    val turnRate: Float,
    val cmEnabled: Boolean,
    val legs: Int,
    val heroId: Int,
    val turboPicks: Int,
    val turboWins: Int,
    val proBan: Int,
    val proWin: Int,
    val proPick: Int,
    val heraldPick: Int,
    val heraldWin: Int,
    val guardianPick: Int,
    val guardianWin: Int,
    val crusaderPick: Int,
    val crusaderWin: Int,
    val archonPick: Int,
    val archonWin: Int,
    val legendPick: Int,
    val legendWin: Int,
    val ancientPick: Int,
    val ancientWin: Int,
    val divinePick: Int,
    val divineWin: Int,
    val immortalPick: Int,
    val immortalWin: Int,
    val nullPick: Int,
    val nullWin: Int,
    val winRatePro: Float = if (proWin != 0) ((proWin.toFloat() / proPick.toFloat()) * 100.0F) else proWin.toFloat(),
    val winRateTurbo: Float = if (turboWins != 0) ((turboWins.toFloat() / turboPicks.toFloat()) * 100.0F) else turboWins.toFloat(),
    val overallWins: Int = heraldWin + guardianWin + crusaderWin + archonWin + legendWin + ancientWin + divineWin + immortalWin,
    val overallPicks: Int = heraldPick + guardianPick + crusaderPick + archonPick + legendPick + ancientPick + divinePick + immortalPick,
    val winRateOverall: Float = if (overallWins != 0) ((overallWins.toFloat() / overallPicks.toFloat()) * 100.0F) else overallWins.toFloat(),
    val winRateHerald: Float = if (heraldWin != 0) ((heraldWin.toFloat() / heraldPick.toFloat()) * 100.0F) else heraldWin.toFloat(),
    val winRateGuardian: Float = if (guardianWin != 0) ((guardianWin.toFloat() / guardianPick.toFloat()) * 100.0F) else guardianWin.toFloat(),
    val winRateCrusader: Float = if (crusaderWin != 0) ((crusaderWin.toFloat() / crusaderPick.toFloat()) * 100.0F) else crusaderWin.toFloat(),
    val winRateArchon: Float = if (archonWin != 0) ((archonWin.toFloat() / archonPick.toFloat()) * 100.0F) else archonWin.toFloat(),
    val winRateLegend: Float = if (legendWin != 0) ((legendWin.toFloat() / legendPick.toFloat()) * 100.0F) else legendWin.toFloat(),
    val winRateAncient: Float = if (ancientWin != 0) ((ancientWin.toFloat() / ancientPick.toFloat()) * 100.0F) else ancientWin.toFloat(),
    val winRateDivine: Float = if (divineWin != 0) ((divineWin.toFloat() / divinePick.toFloat()) * 100.0F) else divineWin.toFloat(),
    val winRateImmortal: Float = if (immortalWin != 0) ((immortalWin.toFloat() / immortalPick.toFloat()) * 100.0F) else immortalWin.toFloat(),
)